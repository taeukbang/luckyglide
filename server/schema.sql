create table if not exists public.fares (
  id bigint generated by default as identity primary key,
  "from" text not null,
  "to" text not null,
  departure_date date not null,
  return_date date not null,
  trip_days int not null check (trip_days >= 1),
  min_price numeric,
  min_airline text,
  transfer_filter smallint not null default -1,
  collected_at timestamptz not null default now(),
  is_latest boolean not null default false
);

-- Helpful indexes for queries
create index if not exists idx_fares_route_dates on public.fares ("from", "to", transfer_filter, departure_date, return_date);
create index if not exists idx_fares_collected_at on public.fares (collected_at desc);
create index if not exists idx_fares_latest_flag on public.fares ("from", "to", transfer_filter, is_latest) where is_latest = true;

-- Latest price per route and departure (example view)
create or replace view public.fares_latest as
select distinct on ("from", "to", departure_date, return_date)
  "from", "to", departure_date, return_date, trip_days, min_price, min_airline, collected_at
from public.fares
where is_latest = true and min_price is not null and transfer_filter = -1
order by "from", "to", departure_date, return_date, collected_at desc;

-- Sample query: lowest price per day (most recently collected)
-- select * from public.fares_latest where from='ICN' and to='TYO' order by departure_date;


-- Per-destination extrema view: returns one row per (from,to) holding the minimum-price row
-- along with the maximum price value observed for that (from,to).
create or replace view public.fares_city_extrema as
with ranked as (
  select
    f."from",
    f."to",
    f.departure_date,
    f.return_date,
    f.trip_days,
    f.min_price,
    f.min_airline,
    f.collected_at,
    max(f.min_price) over (partition by f."from", f."to", f.transfer_filter) as max_price,
    row_number() over (
      partition by f."from", f."to", f.transfer_filter
      order by f.min_price asc nulls last, f.departure_date asc, f.collected_at desc
    ) as rn
  from public.fares f
  where f.is_latest = true and f.min_price is not null and f.transfer_filter = -1
)
select
  "from",
  "to",
  departure_date,
  return_date,
  trip_days,
  min_price,
  max_price,
  min_airline,
  collected_at
from ranked
where rn = 1;

-- Direct only variants
create or replace view public.fares_latest_direct as
select distinct on ("from", "to", departure_date, return_date)
  "from", "to", departure_date, return_date, trip_days, min_price, min_airline, collected_at
from public.fares
where is_latest = true and min_price is not null and transfer_filter = 0
order by "from", "to", departure_date, return_date, collected_at desc;

create or replace view public.fares_city_extrema_direct as
with ranked as (
  select
    f."from",
    f."to",
    f.departure_date,
    f.return_date,
    f.trip_days,
    f.min_price,
    f.min_airline,
    f.collected_at,
    max(f.min_price) over (partition by f."from", f."to", f.transfer_filter) as max_price,
    row_number() over (
      partition by f."from", f."to", f.transfer_filter
      order by f.min_price asc nulls last, f.departure_date asc, f.collected_at desc
    ) as rn
  from public.fares f
  where f.is_latest = true and f.min_price is not null and f.transfer_filter = 0
)
select
  "from",
  "to",
  departure_date,
  return_date,
  trip_days,
  min_price,
  max_price,
  min_airline,
  collected_at
from ranked
where rn = 1;

-- Baseline (direct only): price distribution percentiles for upcoming windows
create or replace view public.fares_baseline_direct as
select
  f."from",
  f."to",
  count(*) as sample_rows,
  percentile_cont(0.50) within group (order by f.min_price) as p50_price,
  percentile_cont(0.25) within group (order by f.min_price) as p25_price,
  percentile_cont(0.10) within group (order by f.min_price) as p10_price,
  percentile_cont(0.05) within group (order by f.min_price) as p05_price,
  percentile_cont(0.01) within group (order by f.min_price) as p01_price
from public.fares f
where f.is_latest = true
  and f.transfer_filter = 0
  and f.min_price is not null
group by f."from", f."to";

-- Baseline (all: direct+transit): price distribution percentiles
create or replace view public.fares_baseline_all as
select
  f."from",
  f."to",
  count(*) as sample_rows,
  percentile_cont(0.50) within group (order by f.min_price) as p50_price,
  percentile_cont(0.25) within group (order by f.min_price) as p25_price,
  percentile_cont(0.10) within group (order by f.min_price) as p10_price,
  percentile_cont(0.05) within group (order by f.min_price) as p05_price,
  percentile_cont(0.01) within group (order by f.min_price) as p01_price
from public.fares f
where f.is_latest = true
  and f.transfer_filter = -1
  and f.min_price is not null
group by f."from", f."to";


